openapi: '3.0.3'

info:
  description: RecipePrep Backend
  version: 0.1.0
  title: RecipePrep Backend

servers:
  - url: http://localhost:3010/v0

paths:
  /recipes:
    get:
      description: Get matching recipes by keywords
      parameters:
        - in: query
          name: search
          schema:
            type: string
          required: true
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        200:
          description: Recipes that match the key words
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultRecipes'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /featured_recipes:
    get:
      description: Get currently featured recipes 
      responses:
        200:
          description: Featured Recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipes'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /recipe/{id}:
    get:
      description: Get a recipe by its id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Spoonacular's recipe id
      responses:
        200:
          description: Recipe by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        404:
          description: No recipe found for that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{userId}/grocerylist:
    get:
      description: Get all grocery lists associated with a user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Valid request for user's grocery lists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroceryLists'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyValues'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Create new grocery list for user
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 30
      responses:
        201:
          description: Successfully created new grocery list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroceryList'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyValues'
        409:
          description: Grocery list with that name already exists for the user
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{userId}/grocerylist/{listId}:
    put:
      description: Change the name of a user's grocery list
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
        - in: path
          name: listId
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
                  maxLength: 30
      responses:
        200:
          description: Successfully changed the name of the user's grocery list
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyValues'
        404:
          description: Server couldn't find that grocery list for the user
        403:
          description: Grocery list with that name already exists for the user
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Delete the user's gorcery list
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true    
        - in: path
          name: listId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successfully delete the grocery list
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyValues'
        404:
          description: Server couldn't find that grocery list for the user
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'




        
         





components:
  schemas:
    Error:
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
        - code
        - message
      
    Recipes:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          title:
            type: string
          calories:
            type: integer
          carbs:
            type: string
          fat:
            type: string
          image:
            type: string
          imageType:
            type: string
          protein:
            type: string
  
    ResultRecipes:
      type: object
      properties:
        remaining:
          type: integer
        results:
          $ref: '#/components/schemas/Recipes'
  
    Recipe:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        readyInMinutes:
          type: integer
        servings:
          type: integer
        image:
          type: string
        nutrients:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              amount:
                type: number
              unit:
                type: string
        ingredients:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              amount:
                type: number
              unit:
                type: string
              meta:
                type: string
        cuisines:
          type: string
        diets:
          type: string
        instructions:
          type: array
          items:
            type: string
    GroceryLists:
      type: array
      items:
        $ref: '#/components/schemas/GroceryList'
    GroceryList:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
        listName:
          type: string
    AnyValue: {}
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

